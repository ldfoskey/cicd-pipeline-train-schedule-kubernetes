On all Nodes --preKubernetes install/prep

sudo apt update
sudo apt upgrade
swapoff -a
sudo  vim /etc/sysctl.conf  <<<<<<<<  add vm.swappiness=0 to end of file


Install Kubernetes
follow directions in Install-Kubernetes-Ubuntu.txt

Install and/or configure Git
follow direction in "Use Git to Make Changes to Code" .pdf

Install Java 11 and unzip:

	  sudo apt install -y openjdk-11-jdk unzip


Install Gradle 5.6.4 (using "C:\Users\403518\Downloads\1597953620561-02_02_Installing Gradle.pdf") and below info:

download Gradle 5.6.4
	-wget -O ~/gradle-5.6.4-bin.zip https://services.gradle.org/distributions/gradle-5.6.4-bin.zip

 sudo mkdir /opt/gradle
 sudo unzip -d /opt/gradle gradle-5.6.4-bin.zip
 ls /opt/gradle/gradle-5.6.4

sudo vim /etc/profile.d/gradle.sh:
	  export PATH=$PATH:/opt/gradle/gradle-5.6.4/bin

sudo chmod 755 /etc/profile.d/gradle.sh

logout and log back in

verify Gradle installation:
	  gradle --version

Install and run the Gradle Wrapper:
cd  ~/
mkdir my-project
cd my-project/
gradle wrapper
ls
./gradlew build
cd ~/

Install Jenkins

1.	Make sure java 11 is installed.  >>>>>>>>>>> to remove java sudo apt remove java

2.	curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
     /usr/share/keyrings/jenkins-keyring.asc > /dev/null

	or
	
	sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  	https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key


2b.  echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
     https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
     /etc/apt/sources.list.d/jenkins.list > /dev/null

	Copied from: https://www.jenkins.io/blog/2023/03/27/repository-signing-keys-changing/

3. 	sudo apt update

4.	sudo apt install jenkins

5.	sudo systemctl enable jenkins

6.	sudo systemctl start jenkins.service

7.	sudo systemctl status jenkins

	cOPIED FROM:https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-22-04

8. Log in to the Jenkins server using the credentials provided to retrieve the temporary adminpassword for the Jenkins instance:

ssh cloud_user@<CLOUD_SERVER_JENKINS_PUBLIC_IP_ADDRESS>

9. From your Cloud Server Jenkins Server shell, copy the admin password and paste itinto the Administrator password field to unlock Jenkins:

sudo cat /var/lib/jenkins/secrets/initialAdminPassword

10. Click Continue.



Install Docker

sudo apt  install docker.io
sudo systemctl start docker
sudo systemctl enable docker
sudo groupadd docker
sudo usermod -aG docker jenkins
sudo systemctl restart jenkins
sudo systemctl restart docker

logout and log back in

groups



Install Helm
curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > /tmp/get_helm.sh
chmod 700 /tmp/get_helm.sh
DESIRED_VERSION=v3.13.1 /tmp/get_helm.sh
kubectl --namespace=kube-system create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
helm ls
cd ~/
git clone https://github.com/kubernetes/charts
cd charts
git checkout efdcffe0b6973111ec6e5e83136ea74cdbe6527d
cd ../




Install Prometheus (using "C:\Users\403518\Downloads\1597954323956-07_02_Installing Prometheus and Grafana.pdf"

vim prometheus-values.yml:
	  alertmanager:
           persistentVolume:
               enabled: false
       server:
           persistentVolume:
               enabled: false

helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

helm repo add stable https://charts.helm.sh/stable

helm repo update

kubectl create namespace prometheus

helm install -f prometheus-values.yml prometheus prometheus-community/prometheus --namespace prometheus

# helm install -f prometheus-values.yml prometheus prometheus-community/kube-prometheus-stack --namespace prometheus

NOTES:
kube-prometheus-stack has been installed. Check its status by running:
  kubectl --namespace prometheus get pods -l "release=prometheus"

Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create & configure Alertmanager and Prometheus instances using the Operator.

kubectl expose service prometheus-server --type=NodePort --target-port=9090 --name=prometheus-server-ext -n prometheus --external-ip=52.53.172.219


Install Grafana

helm repo add grafana https://grafana.github.io/helm-charts
helm repo update

kubectl create namespace grafana

vim grafana-values.yml:
	  adminPassword: password

helm install -f grafana-values.yml grafana grafana/grafana --namespace grafana

vim grafana-ext.yml:
	   
kind: Service
apiVersion: v1
metadata:
  namespace: grafana
  name: grafana-ext
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: grafana
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
    nodePort: 30000
  externalIPs:
    - 13.57.249.128

kubectl apply -f grafana-ext.yml

kubectl get pods -n prometheus
kubectl get pods -n grafana

username: admin
password: password



configure Jenkins credentials:

webserver_login:

Click + Add Credentials:
Kind: Username with password
Username: cloud_user
Password: <CLOUD_SERVER_JENKINS_PASSWORD>
ID: webserver_login
Description: Webserver Login
Click
Create


kubeconfig:

Need kubernetes plugins


kind:secret file
cat ~/.kube/config >>>>> kubeconfig.txt



github:

Generate a new GitHub API key to allow Jenkins to access the forked repo by navigating to Profile > Settings > Developer Settings > Personal Access Tokens > Tokens (classic) > Generate new token (classic).
  Note: Jenkins
  Permissions: admin:repo_hook

Copy the GitHub token.

In Jenkins, create a Multibranch Pipeline project named
train-schedule.

Under Branch Sources , add GitHub , then add Jenkins to configure your forked repository.

Kind: Username with password
Scope: Global
Username: <GITHUB_USERNAME>
Password: <YOUR_GITHUB_PERSONAL_ACCESS_TOKEN>
ID: github_key
Description: GitHub Key
Click Add

Select the GitHub Key and paste your forked repository under Repository HTTPS URL:

https://github.com/<YOUR_GITHUB_USER>/cicd-pipeline-train-schedule-dockerdeploy
Click Validate to test your credentials

Click Save.



docker hub:

Need Docker plugins

Click + Add Credentials:

Kind: Username with password
Username: <DOCKER_HUB_USERNAME>
Password: <DOCKER_HUB_PASSWORD>
ID: docker_hub_login
Description: Docker Hub Login
Click
Create


If kubectl delete namespace "namespace" get stuck run at prompt:

python3 -c "namespace='train-schedule';import atexit,subprocess,json,requests,sys;proxy_process = subprocess.Popen(['kubectl', 'proxy']);atexit.register(proxy_process.kill);p = subprocess.Popen(['kubectl', 'get', 'namespace', namespace, '-o', 'json'], stdout=subprocess.PIPE);p.wait();data = json.load(p.stdout);data['spec']['finalizers'] = [];requests.put('http://127.0.0.1:8001/api/v1/namespaces/{}/finalize'.format(namespace), json=data).raise_for_status()"




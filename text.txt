kubectl --namespace=kube-system create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default



sudo kubectl create namespace prometheus

helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

helm repo add stable https://charts.helm.sh/stable

helm repo update 

helm install -f prometheus-values.yml prometheus prometheus-community/kube-prometheus-stack --namespace prometheus

sudo kubectl create namespace grafana

helm repo add grafana https://grafana.github.io/helm-charts

helm repo update

helm install -f grafana-values.yml grafana grafana/grafana --namespace grafana




DESIRED_VERSION=v3.13.1 /tmp/get_helm.sh

grafana-ext.yml:

kind: Service
apiVersion: v1
metadata:
  namespace: grafana
  name: grafana-ext
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: grafana
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
    nodePort: 30000
  externalIPs:
    - 13.57.249.128

username: admin
password: password


sudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli docker-compose-plugin containe

Install Gradle

1.  install java 11 and unzip
	- sudo apt install unzip
	- sudo apt install -y openjdk-11-jdk

2.  download Gradle 5.6.4
	-wget -O ~/gradle-5.6.4-bin.zip https://services.gradle.org/distributions/gradle-5.6.4-bin.zip

3.  sudo mkdir /opt/gradle
    sudo unzip -d /opt/gradle gradle-5.6.4-bin.zip
    ls /opt/gradle/gradle-5.6.4

4.  sudo vim /etc/profile.d/gradle.sh
	- export PATH=$PATH:/opt/gradle/gradle-5.6.4/bin
	- sudo chmod 755 /etc/profile.d/gradle.sh

5.  logout and log back in

6.  verify Gradle installation
	- gradle --version

7.   cd  ~/
	mkdir my-project
	cd my-project/
	gradle wrapper
	ls
	./gradlew build
 	

Install Jenkins

1.	Make sure java 11 is installed.  >>>>>>>>>>> to remove java sudo apt remove java

2.	curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
     /usr/share/keyrings/jenkins-keyring.asc > /dev/null

	or
	
	sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  	https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key


2b.  echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
     https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
     /etc/apt/sources.list.d/jenkins.list > /dev/null

	Copied from: https://www.jenkins.io/blog/2023/03/27/repository-signing-keys-changing/

3. 	sudo apt update

4.	sudo apt install jenkins

5.	sudo systemctl enable jenkins

6.	sudo systemctl start jenkins.service

7.	sudo systemctl status jenkins

	cOPIED FROM:https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-22-04 

Install Jenkins on Kubernetes

1. 	git clone https://github.com/scriptcamp/kubernetes-jenkins

2.	kubectl create namespace devops-tools

3.	Create a 'serviceAccount.yaml' file and copy the following admin service account manifest.

	---
	apiVersion: rbac.authorization.k8s.io/v1
	kind: ClusterRole
	metadata:
  	  name: jenkins-admin
	rules:
	  - apiGroups: [""]
 	    resources: ["*"]
  	    verbs: ["*"]
	---
	apiVersion: v1
	kind: ServiceAccount
	metadata:
	  name: jenkins-admin
 	  namespace: devops-tools
	---
	apiVersion: rbac.authorization.k8s.io/v1
	kind: ClusterRoleBinding
	metadata:
 	  name: jenkins-admin
	roleRef:
  	  apiGroup: rbac.authorization.k8s.io
  	  kind: ClusterRole
  	  name: jenkins-admin
	subjects:
 	- kind: ServiceAccount
  	  name: jenkins-admin
  	  namespace: devops-tools

4. 	kubectl apply -f serviceAccount.yaml

5.	Create 'volume.yaml' and copy the following persistent volume manifest.

kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv-volume
  labels:
    type: local
spec:
  storageClassName: local-storage
  claimRef:
    name: jenkins-pv-claim
    namespace: devops-tools
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  local:
    path: /mnt
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - worker-node01
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pv-claim
  namespace: devops-tools
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi

6.	Important Note: Replace 'worker-node01' with any one of your cluster worker nodes hostname.

7.	kubectl create -f volume.yaml

8.	Create a Deployment file named 'deployment.yaml' and copy the following deployment manifest.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: devops-tools
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins-server
  template:
    metadata:
      labels:
        app: jenkins-server
    spec:
      securityContext:
            fsGroup: 1000
            runAsUser: 1000
      serviceAccountName: jenkins-admin
      containers:
        - name: jenkins
          image: jenkins/jenkins:lts
          resources:
            limits:
              memory: "2Gi"
              cpu: "1000m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - name: httpport
              containerPort: 8080
            - name: jnlpport
              containerPort: 50000
          livenessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
      volumes:
        - name: jenkins-data
          persistentVolumeClaim:
              claimName: jenkins-pv-claim

9.	kubectl apply -f deployment.yaml

10.	kubectl get deployments -n devops-tools

11.	kubectl describe deployments --namespace=devops-tools

12.	We have now created a deployment. However, it is not accessible to the outside world. For accessing the Jenkins 	deployment from the outside world, we need to create a service and map it to the deployment.

	Create 'service.yaml' and copy the following service manifest:

	apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
  namespace: devops-tools
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path:   /
      prometheus.io/port:   '8080'
spec:
  selector:
    app: jenkins-server
  type: NodePort
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 32000

13.	kubectl apply -f service.yaml

14.	http://<node-ip>:32000

15.	Jenkins will ask for the initial Admin password when you access the dashboard for the first time.

	You can get that from the pod logs either from the Kubernetes dashboard or CLI. You can get the pod details using the 	following CLI command.

	kubectl get pods --namespace=devops-tools

	With the pod name, you can get the logs as shown below. Replace the pod name with your pod name.

	kubectl logs jenkins-deployment-2539456353-j00w5 --namespace=devops-tools
	
	The password can be found at the end of the log.

16.	Alternatively, you can run the exec command to get the password directly from the location as shown below.

	kubectl exec -it jenkins-559d8cd85c-cfcgk cat /var/jenkins_home/secrets/initialAdminPassword -n devops-tools

